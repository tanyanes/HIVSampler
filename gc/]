#include <string>
#include <sstream>
#include <iomanip>
#include <iostream>
#include "StreamHeader.h"
#include <streambuf>
#include <fstream>
#include <cmath>
#include <bits/stdc++.h>
#include "ArithmeticHeader.h"
//#include "ArithmeticHeader.cpp"
using namespace std;

Polyhedron::Polyhedron(string input, string output)
{
	int pointct = 0;
	parseToOutput(input,output);
	string line;
	ifstream file(output);
	while(getline(file,line)){
		pointct++;
	}
	double *points = new double[3*pointct-3];
	points = readOutputToArrays(output);
	pointArray = points;
	//cout << "POINT COUNT : " <<  pointct << endl;
	//cout << "OT" << 3*pointct-3 << endl;
	Triangle *triArray = new Triangle[(pointct-1)/3];
	//tricount = (3*pointct-3)/9;
	setTriCount(input,output);
	for(int i = 0; i < (3*pointct-3);i+=9){
	double *a = new double[3] {pointArray[i+0],pointArray[i+1],pointArray[i+2]};
	double *b = new double[3] {pointArray[i+3],pointArray[i+4],pointArray[i+5]};
	double *c = new double[3] {pointArray[i+6],pointArray[i+7],pointArray[i+8]};
	//Triangle *temp = new Triangle(p1,p2,p3);
	Triangle *bee = new Triangle(a,b,c);
	triArray[i/9] = *bee;
	}
	triangleArray = triArray;
	copyToExterior();
	sampleLargeTriangles();
	cout << "MADE A POLYHEDRON" << endl;
}

Polyhedron::~Polyhedron()
{
	delete[] pointArray;
	cout<< "DELETED A POLYHEDRON" << endl;
}

void Polyhedron::setTriCount(string input, string output){
	int pointct = 0;
        parseToOutput(input,output);
        string line;
        ifstream file(output);
        while(getline(file,line)){
                pointct++;
        }
	tricount = ((pointct-1)/3);
}

bool Polyhedron::pointInTriangle(Triangle* tri, double x, double y ,double z){
	bool boolz = false;
	double points[9] = {tri->getPoints()[0],tri->getPoints()[1],tri->getPoints()[2],tri->getPoints()[3],
	tri->getPoints()[4],tri->getPoints()[5],tri->getPoints()[6],tri->getPoints()[7],tri->getPoints()[8]};
	double *pt = new double[3] {x,y,z};
	double *pp1 = new double[3] {points[0],points[1],points[2]};
	double *pp2 = new double[3] {points[3],points[4],points[5]};
	double *pp3 = new double[3] {points[6],points[7],points[8]};
	Triangle *T1 = new Triangle(pp1,pp2,pt);
	Triangle *T2 = new Triangle(pp2,pp3,pt);
	Triangle *T3 = new Triangle(pp1,pp3,pt);
	double A1 = T1->getArea();
	double A2 = T2->getArea();
	double A3 = T3->getArea();
	double myArea = tri->getArea();
	double areasum = A1 + A2 + A3;
	double areadiff = areasum - myArea;
	if(abs(areadiff) < 0.01){
		boolz = true;
	}
	//cout << boolz << endl;
	return boolz;
}

bool Polyhedron::isInterior(Triangle *tri){
	bool flag = true;
	int upNormalCt=0;
	int downNormalCt=0;
	for(int i = 0; i < tricount; i++){
		double *triangleInTriList = new double[9] {triangleArray[i].getPoints()[0],triangleArray[i].getPoints()[1],triangleArray[i].getPoints()[2],
		triangleArray[i].getPoints()[3],triangleArray[i].getPoints()[4],triangleArray[i].getPoints()[5],triangleArray[i].getPoints()[6],
		triangleArray[i].getPoints()[7],triangleArray[i].getPoints()[8]};
		double *points = new double[9] {tri->getPoints()[0],tri->getPoints()[1],tri->getPoints()[2],tri->getPoints()[3],
        	tri->getPoints()[4],tri->getPoints()[5],tri->getPoints()[6],tri->getPoints()[7],tri->getPoints()[8]};
		double *planePoint = new double[3] {triangleInTriList[0],triangleInTriList[1],triangleInTriList[2]};
		double *planeNormal = new double[3] {triangleArray[i].getNormal()[0],triangleArray[i].getNormal()[1],triangleArray[i].getNormal()[2]};
		double *linePoint = new double[3] {tri->getCenter()[0],tri->getCenter()[1],tri->getCenter()[2]};
		double *V1 = new double[3] {points[6]-points[0],points[7]-points[1],points[8]-points[2]};
		//cout << "V1: " << V1[0]<< "  " << V1[1] << "  " << V1[2] << endl;
		double *V2 = new double[3] {points[3]-points[0],points[4]-points[1],points[5]-points[2]};
		//cout << "V2: " << V2[0] << "  " << V2[1] << "  " << V2[2] << endl;
		double *lineDir = new double[3] {V1[1]*V2[2]-V1[2]*V2[1],-(V1[0]*V2[2]-V1[2]*V2[0]),V1[0]*V2[1]-V1[1]*V2[0]};
		double dMag = sqrt(lineDir[0]*lineDir[0] + lineDir[1]*lineDir[1] + lineDir[2]*lineDir[2]);
		double *lineDirNormalize = new double[3] {lineDir[0]/dMag,lineDir[1]/dMag,lineDir[2]/dMag};
	
		double tNum = (planeNormal[0]*planePoint[0] + planeNormal[1]*planePoint[1] + planeNormal[2]*planePoint[2]) 
		- (planeNormal[0]*linePoint[0] + planeNormal[1]*linePoint[1] + planeNormal[2]*linePoint[2]);
		double tDenom = planeNormal[0]*lineDirNormalize[0] + planeNormal[1]*lineDirNormalize[1] + planeNormal[2]*lineDirNormalize[2];
		double t = tNum/tDenom;
		double *projectedPoint = new double[3] {linePoint[0] + (lineDirNormalize[0]*t) ,linePoint[1] +(lineDirNormalize[1]*t) ,linePoint[2] +(lineDirNormalize[2]*t)};
	
		double *p1 = new double[3] {triangleArray[i].getPoints()[0],triangleArray[i].getPoints()[1],triangleArray[i].getPoints()[2]};
		double *p2 = new double[3] {triangleArray[i].getPoints()[3],triangleArray[i].getPoints()[4],triangleArray[i].getPoints()[5]};
		double *p3 = new double[3] {triangleArray[i].getPoints()[6],triangleArray[i].getPoints()[7],triangleArray[i].getPoints()[8]};
		Triangle *tria = new Triangle(p1,p2,p3);
		//cout << "PROJECTED POINT: " << projectedPoint[0] << "  " << projectedPoint[1] << "  " << projectedPoint[2] << endl;
		if(pointInTriangle(tria,projectedPoint[0],projectedPoint[1],projectedPoint[2]) == true){
			double *C2 = new double[3] {triangleArray[i].getCenter()[0],triangleArray[i].getCenter()[1],triangleArray[i].getCenter()[2]};
			double *TVector = new double[3] {C2[0]-linePoint[0],C2[1]-linePoint[1],C2[2]-linePoint[2]};
			double TVectorMag = sqrt(TVector[0]*TVector[0]+TVector[1]*TVector[1]+TVector[2]*TVector[2]);
			double *UnitT = new double[3] {TVector[0]/TVectorMag,TVector[1]/TVectorMag,TVector[2]/TVectorMag};
			//cout << "< " << UnitT[0] << "  " << UnitT[1] << "  " << UnitT[2] << " >" << endl;
			
			double dot = UnitT[0]*lineDirNormalize[0] + UnitT[1]*lineDirNormalize[1]+UnitT[2]*lineDirNormalize[2];
			//cout << "DOT : " << dot << endl;
			if(dot >= 0){
				upNormalCt++;
			}
			else{
				downNormalCt++;
		}
		}
	}
	upNormalCt--;
	downNormalCt--;
	if(upNormalCt*downNormalCt <= 0){
		flag = false;
	}
	return flag;
}

void Polyhedron::copyToExterior(){
	int *oneHot = new int[tricount];
	int exteriorCount = 0;
	
	for(int i = 0; i < (tricount); i++){
		double *p1 = new double[3] {triangleArray[i].getPoints()[0],triangleArray[i].getPoints()[1],triangleArray[i].getPoints()[2]};
                double *p2 = new double[3] {triangleArray[i].getPoints()[3],triangleArray[i].getPoints()[4],triangleArray[i].getPoints()[5]};
                double *p3 = new double[3] {triangleArray[i].getPoints()[6],triangleArray[i].getPoints()[7],triangleArray[i].getPoints()[8]};
                Triangle *tria = new Triangle(p1,p2,p3);
		double *troy = new double[9] {triangleArray[i].getPoints()[0],triangleArray[i].getPoints()[1],triangleArray[i].getPoints()[2],
                triangleArray[i].getPoints()[3],triangleArray[i].getPoints()[4],triangleArray[i].getPoints()[5],triangleArray[i].getPoints()[6],
                triangleArray[i].getPoints()[7],triangleArray[i].getPoints()[8]};
		//cout << isInterior(tria)<< endl;
		if(isInterior(tria)){
			oneHot[i] = 0;
		}
		else{
			oneHot[i] = 1;
			exteriorCount++;
		//cout << "C            " << troy[0] << "          " << troy[1] << "          " << troy[2] << endl;
		//cout << "C            " << troy[3] << "          " << troy[4] << "          " << troy[5] << endl;
		//cout << "C            " << troy[6] << "          " << troy[7] << "          " << troy[8] << endl;
		}

	}

	int q = 0;
	Triangle *temp = new Triangle[exteriorCount];
	while( q < exteriorCount){
	for(int j = 0; j < (tricount);j++){
		if(oneHot[j] == 1){
			double *p1 = new double[3] {triangleArray[j].getPoints()[0],triangleArray[j].getPoints()[1],triangleArray[j].getPoints()[2]};
                	double *p2 = new double[3] {triangleArray[j].getPoints()[3],triangleArray[j].getPoints()[4],triangleArray[j].getPoints()[5]};
                	double *p3 = new double[3] {triangleArray[j].getPoints()[6],triangleArray[j].getPoints()[7],triangleArray[j].getPoints()[8]};
                	Triangle *trib = new Triangle(p1,p2,p3);
			temp[q]= *trib; 
			q++;
		}	
	}
	}
	extcount = exteriorCount;
	exteriorArray=temp;
	cout << exteriorCount << endl;
}

void Polyhedron::sampleLargeTriangles(){
	int* oneHot = new int[extcount];
	int bigCount = 0;
	for(int i = 0;i < extcount; i++){
		double *p1 = new double[3] {exteriorArray[i].getPoints()[0],exteriorArray[i].getPoints()[1],exteriorArray[i].getPoints()[2]};
                double *p2 = new double[3] {exteriorArray[i].getPoints()[3],exteriorArray[i].getPoints()[4],exteriorArray[i].getPoints()[5]};
                double *p3 = new double[3] {exteriorArray[i].getPoints()[6],exteriorArray[i].getPoints()[7],exteriorArray[i].getPoints()[8]};
                Triangle *tri = new Triangle(p1,p2,p3);
		double area = tri->getArea();
		if(area > 5.0){
			oneHot[i] = 1;
			bigCount++;
		}
		else{
			oneHot[i] = 0;
		}
	}
	double *temp = new double[3*bigCount];	
	int q = 0;
	while(q < bigCount){
	for(int j = 0; j < (extcount); j++){
		if(oneHot[j] == 1){
			double *p1 = new double[3] {exteriorArray[j].getPoints()[0],exteriorArray[j].getPoints()[1],exteriorArray[j].getPoints()[2]};
                        double *p2 = new double[3] {exteriorArray[j].getPoints()[3],exteriorArray[j].getPoints()[4],exteriorArray[j].getPoints()[5]};
                        double *p3 = new double[3] {exteriorArray[j].getPoints()[6],exteriorArray[j].getPoints()[7],exteriorArray[j].getPoints()[8]};
                        Triangle *trib = new Triangle(p1,p2,p3);
			double *pt = trib->PlacePointInTriangle();
			//cout << pt[0] << "  " << pt[1] << "  " << pt[2] << endl;
			double *prev = new double[3] {0.0,0.0,0.0};
			if(q >= 1){
				prev[0] = temp[(q-1)*3 +0];
				prev[1] = temp[(q-1)*3 +1];
				prev[2] = temp[(q-1)*3 +2];
			}
			//cout << "we are comparing: " <<  prev[0] << "  " << prev[1] << "  " << prev[2] << endl << " and " << pt[0] << "  " << pt[1] << "  " << pt[2] << endl;
			while (distance(prev[0],prev[1],prev[2],pt[0],pt[1],pt[2])<0.1) {
			//while(distance(pt[0],pt[1],pt[2],prev[0],prev[1],prev[2]) < 0.1){
				pt = trib->PlacePointInTriangle();
			}
			temp[q*3 + 0] = pt[0];
			temp[q*3 + 1] = pt[1];
			temp[q*3 + 2] = pt[2];
                        q++;
		}
	}
	}
	pointsAdded=temp;
	for(int i = 0; i < bigCount;i++){
		cout << pointsAdded[3*i+0] << "  " << pointsAdded[3*i+1] << "  " << pointsAdded[3*i+2] << endl;
	}
}

double Polyhedron::distance(double x1,double y1,double z1,double x2,double y2,double z2){
        double distance = sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1) + (z2-z1)*(z2-z1));
        return distance;
}

void Polyhedron::parseToOutput(string input, string output)
{ 
  ifstream is(input); 
  ofstream ofs; 
  ofs.open(output, ofstream::out);                     
  char c; 
  int line_no = 1; 
  while (is.get(c)) 
  {
  	if (c == '\n'){ 
  		line_no++;
	} 
  	if (((line_no-1) % 5 == 2) || ((line_no-1) % 5 == 3) || ((line_no-1) % 5 == 4)){ 
  			ofs << c; 
	}
  }                                                                                                      
  ofs.close();                                                                                                               
  is.close(); 
}

double* Polyhedron::readOutputToArrays(string output){
	std::ifstream inFile;
	inFile.open(output);

	std::stringstream strStream;
	strStream << inFile.rdbuf();
	string str = strStream.str();
	
	int j = 1;
	int ct = 0;
	int pointct = 0;
    	string line;
    	ifstream file(output);
    	while (getline(file, line)){
        	pointct++;	
 	}
	//cout <<  " POINT COUNT IS: " << pointct;
	
	double** triPoints = new double*[pointct];
        for(int i = 0; i < pointct; ++i){
                triPoints[i] = new double[3];
        }

	while( j < str.length()){
    		double x, y, z; 
    		std::size_t offset = j;
    		x = std::stod(&str[offset]); 
    		y = std::stod(&str[offset + 9]); 
    		z = std::stod(&str[offset + 19]);
       		//cout <<  x << "  " << y << "  " << z << endl;
		double *point = new double[3] {x,y,z}; 
		if (ct < pointct){                
			triPoints[ct] = point;
		} 
		j+=28;
		ct++;
	}

	double *PointList = new double[pointct*3-3];
	int i = 0;
	while( i < (pointct-3)){
	for(int j = 0; j < (3*pointct-3); j+=3){
		PointList[j] = triPoints[i][0];
		PointList[j+1] = triPoints[i][1];
		PointList[j+2] = triPoints[i][2];
	i++;
	}
	}
	for(int i = 0; i < (3*pointct-3);i++){
	 // cout << i << "   " << PointList[i] << endl;
	}
	return PointList;
}

 double* Polyhedron::printAreas(string output){
	int pointct = 0;
        string line;
        ifstream file(output);
        while (getline(file, line)){
                pointct++;
        }

	double *triArray = new double[3*pointct-3];
	triArray = readOutputToArrays(output);
	//cout << triArray[0] << endl;
	
	double *Areas = new double[((pointct-1)/3)];
	
	for(int i = 0; i < (pointct*3); i+=9){
		double *v1 = new double[3] {triArray[i+3]-triArray[i],triArray[i+4]-triArray[i+1],triArray[i+5]-triArray[i+2]};
		//cout << "v1: " << v1[0] << " , " << v1[1] << " , " << v1[2] << endl;
		double *v2 = new double[3] {triArray[i+6]-triArray[i],triArray[i+7]-triArray[i+1],triArray[i+8]-triArray[i+2]};
		//cout << "v2: " << v2[0] << " , " << v2[1] << " , " << v2[2] << endl;
		double *cross = new double[3] {(v1[1]*v2[2]-v1[2]*v2[1]),-(v1[0]*v2[2]-v1[2]*v2[0]),(v1[0]*v2[1]-v1[1]*v2[0])};
		//cout << "cross: " << cross[0] << " , " << cross[1] << " , " << cross[2] << endl;
		double area = 0.5*sqrt(((cross[0]*cross[0])+(cross[1]*cross[1])+(cross[2]*cross[2])));
		Areas[i/9] = area;
		/*
		if ((area > 8.0) && (area < 11.0) ) {
		cout << "----------------------------------------------------------" << endl;
		cout << "FACET: " << i/9 << endl;
		cout << "AREA: " << area << endl;
		cout << triArray[i]   <<  "  " << triArray[i+1]  <<  "  " << triArray[i+2] << endl;
		cout << triArray[i+3] <<  "  " << triArray[i+4]  <<  "  " << triArray[i+5] << endl;
		cout << triArray[i+6] <<  "  " << triArray[i+7]  <<  "  " << triArray[i+8] << endl;
		cout << "----------------------------------------------------------" << endl;
		}
		*/
	}	
	return Areas;
} 


void Polyhedron::compareAreas(string output){
	
	int pointct = 0;
        string line;
        ifstream file("output.txt");
        while (getline(file, line)){
                pointct++;
        }
	
	double *FullCapsid = new double[((pointct-1)/3)];
	FullCapsid = printAreas("output.txt");
	//sort(FullCapsid,FullCapsid+((pointct-1)/3));

	int pointct2 = 0;
        string line2;
        ifstream file2(output);
        while (getline(file2, line2)){
                pointct2++;
        }
	
	double *PartCapsid = new double[((pointct2-1)/3)];
	PartCapsid = printAreas(output);
	//sort(PartCapsid,PartCapsid+((pointct2-1)/3));
	
	for(int i = 0; i < ((pointct - 1) / 3); i++){
		double *foo = find(FullCapsid,FullCapsid+((pointct-1)/3),PartCapsid[i]);
		if(foo == (FullCapsid+((pointct-1)/3))){
			if((PartCapsid[i] > 8.0) && (PartCapsid[i] < 11.0)){
				//cout << i << "   " << PartCapsid[i] << endl;
			}
		}
	}
}

