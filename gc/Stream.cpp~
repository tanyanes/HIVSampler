#include <string>
#include <sstream>
#include <iomanip>
#include <iostream>
#include "StreamHeader.h"
#include <streambuf>
#include <fstream>
#include <cmath>
#include <bits/stdc++.h>
#include "ArithmeticHeader.h"
//#include "ArithmeticHeader.cpp"
using namespace std;

Polyhedron::Polyhedron(string input, string output)
{
	int pointct = 0;
	parseToOutput(input,output);
	string line;
	ifstream file(output);
	while(getline(file,line)){
		pointct++;
	}
	double *points = new double[3*pointct-3];
	points = readOutputToArrays(output);
	pointArray = points;
	cout << "POINT COUNT : " <<  pointct << endl;
	//cout << "OT" << 3*pointct-3 << endl;
	Triangle *triArray = new Triangle[(3*pointct-3)/9];
	//tricount = (3*pointct-3)/9;
	setTriCount(input,output);
	for(int i = 0; i < (tricount);i+=9){
	double *a = new double[3] {pointArray[i+0],pointArray[i+1],pointArray[i+2]};
	double *b = new double[3] {pointArray[i+3],pointArray[i+4],pointArray[i+5]};
	double *c = new double[3] {pointArray[i+6],pointArray[i+7],pointArray[i+8]};
	//Triangle *temp = new Triangle(p1,p2,p3);
	Triangle *bee = new Triangle(a,b,c);
	triArray[i/9] = *bee;
	/*i
	cout << i+0 << "  " << i+1 << "  " << i+2 << endl;
	cout << i+3 << "  " << i+4 << "  " << i+5 << endl;
	cout << i+6 << "  " << i+7 << "  " << i+8 << endl;
	cout << " INDEX: " << i/9 << endl;
	*/
	}
	triangleArray = triArray;
	cout << triangleArray[0].getPoints()[0] << " " << triangleArray[0].getPoints()[1] << " " << triangleArray[0].getPoints()[2] << endl;
	cout << "MADE A POLYHEDRON" << endl;
}

Polyhedron::~Polyhedron()
{
	delete[] pointArray;
	cout<< "DELETED A POLYHEDRON" << endl;
}

void Polyhedron::setTriCount(string input, string output){
	 int pointct = 0;
        parseToOutput(input,output);
        string line;
        ifstream file(output);
        while(getline(file,line)){
                pointct++;
        }
	tricount = ((pointct-1)/3);
}

bool Polyhedron::pointInTriangle(Triangle* tri, double x, double y ,double z){
	bool boolz = false;
	double points[9] = {tri->getPoints()[0],tri->getPoints()[1],tri->getPoints()[2],tri->getPoints()[3],
	tri->getPoints()[4],tri->getPoints()[5],tri->getPoints()[6],tri->getPoints()[7],tri->getPoints()[8]};
	double *pt = new double[3] {x,y,z};
	double *pp1 = new double[3] {points[0],points[1],points[2]};
	double *pp2 = new double[3] {points[3],points[4],points[5]};
	double *pp3 = new double[3] {points[6],points[7],points[8]};
	Triangle *T1 = new Triangle(pp1,pp2,pt);
	Triangle *T2 = new Triangle(pp2,pp3,pt);
	Triangle *T3 = new Triangle(pp1,pp3,pt);
	double A1 = T1->getArea();
	double A2 = T2->getArea();
	double A3 = T3->getArea();
	double myArea = tri->getArea();
	double areasum = A1 + A2 + A3;
	double areadiff = areasum - myArea;
	if(abs(areadiff) < 0.1){
		boolz = true;
	}
	cout << boolz << endl;
	return boolz;
}

bool Polyhedron::isInterior(Triangle *tri){
	bool flag = false;
	for(int i = 0; i < tricount; i++){
	double *triangleInTriList = new double[9] {triangleArray[i].getPoints()[0],triangleArray[i].getPoints()[1],triangleArray[i].getPoints()[2],
	triangleArray[i].getPoints()[3],triangleArray[i].getPoints()[4],triangleArray[i].getPoints()[5],triangleArray[i].getPoints()[6],
	triangleArray[i].getPoints()[7],triangleArray[i].getPoints()[8]};
	double points[9] = {tri->getPoints()[0],tri->getPoints()[1],tri->getPoints()[2],tri->getPoints()[3],
        tri->getPoints()[4],tri->getPoints()[5],tri->getPoints()[6],tri->getPoints()[7],tri->getPoints()[8]};
	double *planePoint = new double[3] {triangleInTriList[0],triangleInTriList[1],triangleInTriList[2]};
	double *planeNormal = new double[3] {triangleArray[i].getNormal()[0],triangleArray[i].getNormal()[1],triangleArray[i].getNormal()[2]};
	double *linePoint = new double[3] {tri->getCenter()[0],tri->getCenter()[1],tri->getCenter()[2]};
	double *lineDir = new double[3] {tri->getNormal()[0],tri->getNormal()[1],tri->getNormal()[2]};
	double dMag = sqrt(lineDir[0]*lineDir[0] + lineDir[1]*lineDir[1] + lineDir[2]*lineDir[2]);
	double *lineDirNormalize = new double[3] {lineDir[0]/dMag,lineDir[1]/dMag,lineDir[2]/dMag};
	/*
	cout << "TRIANGLE COUNT: " << i << endl;
	cout << "TRIANGLE: (" <<  triangleInTriList[0] << " , " << triangleInTriList[1] << " , " << triangleInTriList[2] << ") (" << 
	triangleInTriList[3] << " , " << triangleInTriList[4] << " , " << triangleInTriList[5] << ") (" << triangleInTriList[6] << " , " <<
	triangleInTriList[7] << " , " << triangleInTriList[8] << ") " << endl; 
	cout << "PLANE POINT: " << planePoint[0] << "  " << planePoint[1] << "  " << planePoint[2] << endl;
	cout << "PLANE NORMAL: " << planeNormal[0] << "  " << planeNormal[1] << "  " << planeNormal[2] << endl;
	cout << "LINE POINT (center): " << linePoint[0] << "  " << linePoint[1] << "  " << linePoint[2] << endl;
	cout << "LINE DIR: " << lineDirNormalize[0] << "  " << lineDirNormalize[1] << "  " << lineDirNormalize[2] << endl;
	*/
	double tNum = (planeNormal[0]*planePoint[0] + planeNormal[1]*planePoint[1] + planeNormal[2]*planePoint[2]) 
	- (planeNormal[0]*linePoint[0] + planeNormal[1]*linePoint[1] + planeNormal[2]*linePoint[2]);
	double tDenom = planeNormal[0]*lineDirNormalize[0] + planeNormal[1]*lineDirNormalize[1] + planeNormal[2]*lineDirNormalize[2];
	double t = tNum/tDenom;
	double *projectedPoint = new double[3] {linePoint[0] + (lineDirNormalize[0]*t) ,linePoint[1] +(lineDirNormalize[1]*t) ,linePoint[2] +(lineDirNormalize[2]*t)};
	
	//cout << "PROJECTED POINT: " << projectedPoint[0] << "  " << projectedPoint[1] << "  " << projectedPoint[2] << endl;

	if(pointInTriangle(tri,projectedPoint[0],projectedPoint[1],projectedPoint[2]) == true){
		flag = true;
	//	cout << "************************************IN TRIANGLE******************************" << endl;
	}
	}
	return flag;
}

void Polyhedron::parseToOutput(string input, string output)
{ 
  ifstream is(input); 
  ofstream ofs; 
  ofs.open(output, ofstream::out);                     
  char c; 
  int line_no = 1; 
  while (is.get(c)) 
  {
  	if (c == '\n'){ 
  		line_no++;
	} 
  	if (((line_no-1) % 5 == 2) || ((line_no-1) % 5 == 3) || ((line_no-1) % 5 == 4)){ 
  			ofs << c; 
	}
  }                                                                                                      
  ofs.close();                                                                                                               
  is.close(); 
}

double* Polyhedron::readOutputToArrays(string output){
	std::ifstream inFile;
	inFile.open(output);

	std::stringstream strStream;
	strStream << inFile.rdbuf();
	string str = strStream.str();
	
	int j = 1;
	int ct = 0;
	int pointct = 0;
    	string line;
    	ifstream file(output);
    	while (getline(file, line)){
        	pointct++;	
 	}
	//cout <<  " POINT COUNT IS: " << pointct;
	
	double** triPoints = new double*[pointct];
        for(int i = 0; i < pointct; ++i){
                triPoints[i] = new double[3];
        }

	while( j < str.length()){
    		double x, y, z; 
    		std::size_t offset = j;
    		x = std::stod(&str[offset]); 
    		y = std::stod(&str[offset + 9]); 
    		z = std::stod(&str[offset + 19]);
       		//cout <<  x << "  " << y << "  " << z << endl;
		double *point = new double[3] {x,y,z}; 
		if (ct < pointct){                
			triPoints[ct] = point;
		} 
		j+=28;
		ct++;
	}

	double *PointList = new double[pointct*3-3];
	int i = 0;
	while( i < (pointct-3)){
	for(int j = 0; j < (3*pointct-3); j+=3){
		PointList[j] = triPoints[i][0];
		PointList[j+1] = triPoints[i][1];
		PointList[j+2] = triPoints[i][2];
	i++;
	}
	}
	for(int i = 0; i < (3*pointct-3);i++){
	  cout << i << "   " << PointList[i] << endl;
	}
	return PointList;
}

 double* Polyhedron::printAreas(string output){
	int pointct = 0;
        string line;
        ifstream file(output);
        while (getline(file, line)){
                pointct++;
        }

	double *triArray = new double[3*pointct-3];
	triArray = readOutputToArrays(output);
	//cout << triArray[0] << endl;
	
	double *Areas = new double[((pointct-1)/3)];
	
	for(int i = 0; i < (pointct*3); i+=9){
		double *v1 = new double[3] {triArray[i+3]-triArray[i],triArray[i+4]-triArray[i+1],triArray[i+5]-triArray[i+2]};
		//cout << "v1: " << v1[0] << " , " << v1[1] << " , " << v1[2] << endl;
		double *v2 = new double[3] {triArray[i+6]-triArray[i],triArray[i+7]-triArray[i+1],triArray[i+8]-triArray[i+2]};
		//cout << "v2: " << v2[0] << " , " << v2[1] << " , " << v2[2] << endl;
		double *cross = new double[3] {(v1[1]*v2[2]-v1[2]*v2[1]),-(v1[0]*v2[2]-v1[2]*v2[0]),(v1[0]*v2[1]-v1[1]*v2[0])};
		//cout << "cross: " << cross[0] << " , " << cross[1] << " , " << cross[2] << endl;
		double area = 0.5*sqrt(((cross[0]*cross[0])+(cross[1]*cross[1])+(cross[2]*cross[2])));
		Areas[i/9] = area;
		/*
		if ((area > 8.0) && (area < 11.0) ) {
		cout << "----------------------------------------------------------" << endl;
		cout << "FACET: " << i/9 << endl;
		cout << "AREA: " << area << endl;
		cout << triArray[i]   <<  "  " << triArray[i+1]  <<  "  " << triArray[i+2] << endl;
		cout << triArray[i+3] <<  "  " << triArray[i+4]  <<  "  " << triArray[i+5] << endl;
		cout << triArray[i+6] <<  "  " << triArray[i+7]  <<  "  " << triArray[i+8] << endl;
		cout << "----------------------------------------------------------" << endl;
		}
		*/
	}	
	return Areas;
} 


void Polyhedron::compareAreas(string output){
	
	int pointct = 0;
        string line;
        ifstream file("output.txt");
        while (getline(file, line)){
                pointct++;
        }
	
	double *FullCapsid = new double[((pointct-1)/3)];
	FullCapsid = printAreas("output.txt");
	//sort(FullCapsid,FullCapsid+((pointct-1)/3));

	int pointct2 = 0;
        string line2;
        ifstream file2(output);
        while (getline(file2, line2)){
                pointct2++;
        }
	
	double *PartCapsid = new double[((pointct2-1)/3)];
	PartCapsid = printAreas(output);
	//sort(PartCapsid,PartCapsid+((pointct2-1)/3));
	
	for(int i = 0; i < ((pointct - 1) / 3); i++){
		double *foo = find(FullCapsid,FullCapsid+((pointct-1)/3),PartCapsid[i]);
		if(foo == (FullCapsid+((pointct-1)/3))){
			if((PartCapsid[i] > 8.0) && (PartCapsid[i] < 11.0)){
				//cout << i << "   " << PartCapsid[i] << endl;
			}
		}
	}
}

